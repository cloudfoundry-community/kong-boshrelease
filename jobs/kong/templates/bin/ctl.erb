#!/bin/bash
set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/kong/helpers/ctl_setup.sh 'kong'
export DOCKER_COMMAND="/var/vcap/packages/docker/bin/docker -H unix:///var/vcap/sys/run/docker/docker.sock"
export container_name="kong"
export CONTAINERS_PID_DIR=${RUN_DIR}
export CONTAINER_PID_FILE=${CONTAINERS_PID_DIR}/${container_name}.pid

#bosh link will auto grab the postgres, unless it's defined in the manifest
export DATABASE_HOST="<%= link('postgres').instances[0].address %>"
<% if_p("kong_pg_host") do |prop| %>
  export DATABASE_HOST=prop
<% end %>

export plugins=""
for package_dir in $(ls -d /var/vcap/packages/*-plugin)
do
  plugin_name=$(basename /var/vcap/packages/helloworld-plugin | cut -d- -f1)
  plugins="${plugins} -v ${package_dir}/plugins/${plugin_name}:/usr/local/share/lua/5.1/kong/plugins/${plugin_name}"
done

case $1 in

  start)
    pid_guard ${CONTAINER_PID_FILE} ${JOB_NAME}
    echo $$ > ${CONTAINER_PID_FILE}
    ${DOCKER_COMMAND} stop ${container_name}  || true
    ${DOCKER_COMMAND} rm ${container_name} -f || true

  ${DOCKER_COMMAND} run --rm --privileged \
    -e "KONG_DATABASE=<%= p("kong_database") %>" \
    -e "KONG_PG_DATABASE=<%= p("kong_pg_database") %>" \
    -e "KONG_PG_HOST=${DATABASE_HOST}" \
    -e "KONG_PG_USER=<%= p("kong_pg_user") %>" \
    -e "KONG_PG_PASSWORD=<%= p("kong_pg_password") %>" \
    -e "KONG_PROXY_ACCESS_LOG=<%= p("kong_proxy_access_log") %>" \
    -e "KONG_ADMIN_ACCESS_LOG=<%= p("kong_admin_access_log") %>" \
    -e "KONG_PROXY_ERROR_LOG=<%= p("kong_proxy_error_log") %>" \
    -e "KONG_ADMIN_ERROR_LOG=<%= p("kong_admin_error_log") %>" \
    -e "KONG_PROXY_LISTEN=<%= p("kong_proxy_listen") %>" \
    -e "KONG_PROXY_LISTEN_SSL=<%= p("kong_proxy_listen_ssl") %>" \
    -e "KONG_CUSTOM_PLUGINS=<%= p("kong_custom_plugins") %>" \
    ${plugins} \
    -p <%= p("kong_proxy_listen_port") %>:<%= p("kong_proxy_listen_port") %> \
    -p <%= p("kong_proxy_listen_ssl_port") %>:<%= p("kong_proxy_listen_ssl_port") %> \
    -p <%= p("kong_admin_listen_port") %>:<%= p("kong_admin_listen_port") %> \
    -p <%= p("kong_admin_listen_ssl_port") %>:<%= p("kong_admin_listen_ssl_port") %> \
    kong:latest kong migrations up \
    >>${LOG_DIR}/${output_label}.stdout.log \
    2>>${LOG_DIR}/${output_label}.stderr.log

  ${DOCKER_COMMAND} run -d --name kong --privileged \
    -e "KONG_DATABASE=<%= p("kong_database") %>" \
    -e "KONG_PG_DATABASE=<%= p("kong_pg_database") %>" \
    -e "KONG_PG_HOST=${DATABASE_HOST}" \
    -e "KONG_PG_USER=<%= p("kong_pg_user") %>" \
    -e "KONG_PG_PASSWORD=<%= p("kong_pg_password") %>" \
    -e "KONG_PROXY_ACCESS_LOG=<%= p("kong_proxy_access_log") %>" \
    -e "KONG_ADMIN_ACCESS_LOG=<%= p("kong_admin_access_log") %>" \
    -e "KONG_PROXY_ERROR_LOG=<%= p("kong_proxy_error_log") %>" \
    -e "KONG_ADMIN_ERROR_LOG=<%= p("kong_admin_error_log") %>" \
    -e "KONG_PROXY_LISTEN=<%= p("kong_proxy_listen") %>" \
    -e "KONG_PROXY_LISTEN_SSL=<%= p("kong_proxy_listen_ssl") %>" \
    -e "KONG_CUSTOM_PLUGINS=<%= p("kong_custom_plugins") %>" \
    ${plugins} \
    -p <%= p("kong_proxy_listen_port") %>:<%= p("kong_proxy_listen_port") %> \
    -p <%= p("kong_proxy_listen_ssl_port") %>:<%= p("kong_proxy_listen_ssl_port") %> \
    -p <%= p("kong_admin_listen_port") %>:<%= p("kong_admin_listen_port") %> \
    -p <%= p("kong_admin_listen_ssl_port") %>:<%= p("kong_admin_listen_ssl_port") %> \
    kong:latest \
    >>${LOG_DIR}/${output_label}.stdout.log \
    2>>${LOG_DIR}/${output_label}.stderr.log

    echo "waiting for Kong to spin up ..."
    while ! curl -Ls --fail <%= spec.ip %>:<%= p("kong_admin_listen_port") %> 2>/dev/null; do
      sleep 1
    done

    pid_process=$(${DOCKER_COMMAND} inspect -f '{{ .State.Pid }}' ${container_name})
    echo $pid_process > ${CONTAINER_PID_FILE}
    ;;

  stop)
    ${DOCKER_COMMAND} stop ${container_name}
    ${DOCKER_COMMAND} rm ${container_name} -f
    ;;
  *)
    echo "Usage: ctl {start|stop}"

    ;;

esac
exit 0
